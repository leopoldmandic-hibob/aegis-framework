name: reconcile
description: Reconcile framework state with actual system state
version: 1.0

validation_source:
  file: validation.yaml
  type: command_validation
  rules:
    - reconcile

input:
  type: command
  pattern: /aegis reconcile
  options:
    - name: --force
      description: Force reconciliation even if no issues detected
      required: false
  validation:
    type: reconcile
    rules:
      - framework_ready

output:
  type: operation
  actions:
    - check_state
    - fix_inconsistencies
    - update_state_files
  validation:
    reconciliation:
      - state_consistent
      - files_updated

steps:
  1_validate:
    - check_framework:
        rules:
          - framework_structure
          - required_files
          - permissions
    
  2_analyze:
    - check_task_consistency:
        compare:
          - directory: tasks/active
            state_field: activeTasks
          - directory: tasks/completed
            state_field: completedTasks
          - directory: tasks/hold
            state_field: holdTasks
        validation:
          - directories_exist
          - state_file_exists
    
    - check_decision_consistency:
        compare:
          - directory: decisions
            state_field: decisions
        validation:
          - directories_exist
          - state_file_exists
    
    - check_session_consistency:
        compare:
          - directory: sessions
            state_file: memory/session/active.json
          - directory: sessions
            state_directory: memory/session/history
        validation:
          - directories_exist
          - state_file_exists
          - history_directory_exists
          - session_files_match
    
    - check_timestamps:
        files:
          - memory/project/context/project.json
          - memory/project/self_improvement.json
          - memory/session/active.json
        validation:
          - timestamp_format_valid
          - timestamp_recent
    
  3_reconcile:
    - update_project_context:
        file: memory/project/context/project.json
        fields:
          - updated: current_timestamp
          - activeTasks: from_directory_tasks/active
          - completedTasks: from_directory_tasks/completed
          - holdTasks: from_directory_tasks/hold
          - decisions: from_directory_decisions
        validation:
          - file_updated
          - content_valid
    
    - update_session_memory:
        file: memory/session/active.json
        source: sessions
        fields:
          - updated: current_timestamp
          - content.sessionId: from_latest_session
          - content.status: from_latest_session
          - content.started: from_latest_session
          - content.activeTask: from_latest_session
          - content.progress: from_latest_session
          - content.context: from_latest_session
          - content.decisions: from_latest_session
          - content.insights: from_latest_session
        validation:
          - file_updated
          - content_valid
    
    - update_session_history:
        directory: memory/session/history
        source: sessions
        for_each_session:
          - create_history_file: "YYYY-MM-DD-sessionId.json"
          - copy_session_data: "Extract and format session data"
          - validate_history_file: "Ensure file is valid JSON"
        validation:
          - directory_exists
          - files_created
          - content_valid
    
    - verify_self_improvement:
        file: memory/project/self_improvement.json
        validation:
          - file_exists
          - format_valid
    
  4_report:
    - generate_reconciliation_report:
        format: markdown
        sections:
          - issues_found
          - changes_made
          - current_state
        validation:
          - report_complete

errors:
  framework:
    structure: Framework structure invalid
    permissions: Missing required permissions
    state: Invalid framework state
  state:
    inconsistent: State inconsistent with directories
    format: Invalid state format
    update: State update failed

recovery:
  framework:
    structure: Validate framework structure
    permissions: Check and fix permissions
    state: Restore framework state
  state:
    inconsistent: Reconcile state with directories
    format: Fix state format
    update: Retry state update

# AI Assistant Implementation Guide
ai_implementation:
  description: "This operation reconciles the framework's state files with the actual system state"
  
  execution_steps:
    1: "Read the current project.json file"
    2: "List all tasks in active, completed, and hold directories"
    3: "Extract task IDs from filenames"
    4: "Update project.json with current task lists"
    5: "Update timestamp to current time"
    6: "Find the most recent session file"
    7: "Update active.json with information from the most recent session file"
    8: "Create or update session history files"
    9: "Save updated state files"
    10: "Report changes made to the user"
  
  example_implementation: |
    1. Read project.json and active.json
    2. Get task lists:
       - activeTasks = [files in .context/tasks/active/]
       - completedTasks = [files in .context/tasks/completed/]
       - holdTasks = [files in .context/tasks/hold/]
    3. Update project.json:
       - Set updated = current timestamp
       - Set activeTasks = [list of active task IDs]
       - Set completedTasks = [list of completed task IDs]
       - Set holdTasks = [list of hold task IDs]
    4. Get most recent session:
       - Find most recent file in .context/sessions/
       - Extract session information
    5. Update active.json:
       - Set updated = current timestamp
       - Set content.sessionId = [session ID from most recent file]
       - Set content.status = [status from most recent file]
       - Set content.activeTask = [active task from most recent file]
       - Set content.progress = [progress from most recent file]
       - Set content.context = [context from most recent file]
       - Set content.decisions = [decisions from most recent file]
       - Set content.insights = [insights from most recent file]
    6. Create session history:
       - Ensure memory/session/history/ directory exists
       - For each session file in .context/sessions/:
         - Extract session metadata (id, date, etc.)
         - Create JSON file in history directory: YYYY-MM-DD-sessionId.json
         - Copy relevant session data to history file
    7. Save updated files
    8. Report reconciliation results

  session_history_format: |
    {
      "type": "memory",
      "category": "session",
      "id": "SESSION-XXX",
      "created": "YYYY-MM-DDTHH:MM:SS",
      "updated": "YYYY-MM-DDTHH:MM:SS",
      "content": {
        "sessionId": "SESSION-XXX",
        "status": "completed",
        "started": "YYYY-MM-DDTHH:MM:SS",
        "ended": "YYYY-MM-DDTHH:MM:SS",
        "activeTask": "TASK-XXX",
        "progress": "Summary of progress made",
        "decisions": [
          {
            "id": "DECISION-XXX",
            "title": "Decision title",
            "description": "Decision description",
            "timestamp": "YYYY-MM-DDTHH:MM:SS"
          }
        ],
        "insights": [
          {
            "category": "process",
            "text": "Insight text",
            "timestamp": "YYYY-MM-DDTHH:MM:SS"
          }
        ]
      }
    }

# Command Template with Required Components
command_template:
  name: reconcile
  description: "Template for implementing the reconcile command"
  version: 1.0
  
  required_components:
    pre_execution:
      - framework_structure_check:
          description: "Check framework structure"
          validation:
            - structure_valid: "Framework structure must be valid"
          implementation: |
            1. Verify all required directories exist
            2. Check that required files are present
            3. Validate file permissions
      
      - project_context_loading:
          description: "Load project context"
          validation:
            - context_loaded: "Project context must be loaded"
          implementation: |
            1. Load project context from memory/project/context/project.json
            2. Verify project context is valid
            3. Extract task lists and other relevant information
      
      - session_memory_loading:
          description: "Load session memory"
          validation:
            - memory_loaded: "Session memory must be loaded"
          implementation: |
            1. Load active session from memory/session/active.json
            2. Check session history directory
            3. Verify session memory format
    
    execution:
      - task_consistency_check:
          description: "Check task consistency"
          validation:
            - consistency_checked: "Task consistency must be checked"
          implementation: |
            1. Compare task files in tasks/active/ with activeTasks in project.json
            2. Compare task files in tasks/completed/ with completedTasks in project.json
            3. Compare task files in tasks/hold/ with holdTasks in project.json
            4. Identify inconsistencies
      
      - decision_consistency_check:
          description: "Check decision consistency"
          validation:
            - consistency_checked: "Decision consistency must be checked"
          implementation: |
            1. Compare decision files in decisions/ with decisions list in project.json
            2. Identify inconsistencies
      
      - session_consistency_check:
          description: "Check session consistency"
          validation:
            - consistency_checked: "Session consistency must be checked"
          implementation: |
            1. Compare session files in sessions/ with active session
            2. Check session history files
            3. Identify inconsistencies
      
      - project_context_update:
          description: "Update project context"
          validation:
            - context_updated: "Project context must be updated"
          implementation: |
            1. Update activeTasks list based on files in tasks/active/
            2. Update completedTasks list based on files in tasks/completed/
            3. Update holdTasks list based on files in tasks/hold/
            4. Update decisions list based on files in decisions/
            5. Update timestamp to current time
      
      - session_memory_update:
          description: "Update session memory"
          validation:
            - memory_updated: "Session memory must be updated"
          implementation: |
            1. Update active.json with latest session information
            2. Update session history files
            3. Update timestamp to current time
      
      - session_history_update:
          description: "Update session history"
          validation:
            - history_updated: "Session history must be updated"
          implementation: |
            1. Create history files for all sessions
            2. Ensure history files match session files
            3. Update timestamps
    
    post_execution:
      - project_context_verification:
          description: "Verify project context has been updated"
          validation:
            - context_verified: "Project context update must be verified"
          implementation: |
            1. Verify project.json has been updated
            2. Check that task lists match directory contents
            3. Confirm timestamp is current
      
      - session_memory_verification:
          description: "Verify session memory has been updated"
          validation:
            - memory_verified: "Session memory update must be verified"
          implementation: |
            1. Verify active.json has been updated
            2. Check that session information is current
            3. Confirm timestamp is current
      
      - session_history_verification:
          description: "Verify session history has been updated"
          validation:
            - history_verified: "Session history update must be verified"
          implementation: |
            1. Verify history files exist for all sessions
            2. Check that history files match session files
            3. Confirm timestamps are current
      
      - reconciliation_report:
          description: "Generate reconciliation report"
          validation:
            - report_generated: "Reconciliation report must be generated"
          implementation: |
            1. Create report of issues found
            2. Document changes made
            3. Summarize current state
    
    error_handling:
      - error_detection:
          description: "Detect and handle errors"
          validation:
            - errors_handled: "All potential errors must be handled"
          implementation: |
            1. Check for common errors (missing files, invalid format)
            2. Implement recovery procedures
            3. Log errors and recovery attempts
      
      - consistency_enforcement:
          description: "Enforce system consistency"
          validation:
            - consistency_enforced: "System consistency must be enforced"
          implementation: |
            1. Prioritize file system state over memory state
            2. Update memory files to match file system
            3. Document all inconsistencies and fixes
  
  implementation_example: |
    # Example implementation of /aegis reconcile
    
    ## Pre-execution
    1. Check framework structure:
       - Verify all required directories exist
       - Check that required files are present
       - Validate file permissions
    2. Load project context:
       - Load project.json from memory/project/context/
       - Verify project context is valid
       - Extract task lists and other information
    3. Load session memory:
       - Load active.json from memory/session/
       - Check session history directory
       - Verify session memory format
    
    ## Execution
    1. Check task consistency:
       - Compare task files in tasks/active/ with activeTasks in project.json
       - Compare task files in tasks/completed/ with completedTasks in project.json
       - Compare task files in tasks/hold/ with holdTasks in project.json
       - Found inconsistency: TASK-123 in tasks/active/ but not in activeTasks
    2. Check decision consistency:
       - Compare decision files in decisions/ with decisions list in project.json
       - Found inconsistency: DEC-001 in decisions/ but not in decisions list
    3. Check session consistency:
       - Compare session files in sessions/ with active session
       - Check session history files
       - Found inconsistency: Latest session not reflected in active.json
    4. Update project context:
       - Update activeTasks to include TASK-123
       - Update decisions list to include DEC-001
       - Update timestamp to current time
    5. Update session memory:
       - Update active.json with latest session information
       - Update timestamp to current time
    6. Update session history:
       - Create history files for all sessions
       - Ensure history files match session files
    
    ## Post-execution
    1. Verify project context:
       - Confirm project.json has been updated
       - Verify task lists match directory contents
       - Confirm timestamp is current
    2. Verify session memory:
       - Confirm active.json has been updated
       - Verify session information is current
       - Confirm timestamp is current
    3. Verify session history:
       - Confirm history files exist for all sessions
       - Verify history files match session files
    4. Generate report:
       - Document inconsistencies found: 3
       - Document changes made: 3
       - Summarize current state
    
    ## Error handling
    1. Handle errors:
       - If project.json is missing, create from directory contents
       - If active.json is invalid, recreate from latest session
    2. Enforce consistency:
       - Prioritize file system state over memory state
       - Update memory files to match file system
       - Document all inconsistencies and fixes 