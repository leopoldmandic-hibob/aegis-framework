name: start
description: Begin development session and load project context
version: 1.0

natural_language_examples:
  - command: "/aegis start"
    variations:
      - "start a new development session"
      - "begin working on the project"
      - "initialize a new session"
      - "start development"
      - "create new session"
  - command: "/aegis start --task TASK-123"
    variations:
      - "start working on TASK-123"
      - "begin session focusing on TASK-123"
      - "start development with TASK-123"
      - "initialize session for TASK-123"
      - "create new session for TASK-123"
  - command: "/aegis start --continue"
    variations:
      - "continue the previous session"
      - "resume last development session"
      - "pick up where I left off"
      - "continue development"
      - "resume work"

validation_source:
  file: validation.yaml
  type: command_validation
  rules:
    - start
input:
  type: command
  pattern: /aegis start
  options:
    - name: --task
      description: Start with specific task
      required: false
    - name: --continue
      description: Continue last session
      required: false
  validation:
    type: start
    rules:
      - framework_ready
      - valid_permissions
      - valid_task

output:
  type: operation
  actions:
    - load_context
    - set_focus
    - begin_session
  validation:
    session:
      - format_valid
      - state_valid
    task:
      - exists
      - valid_state

steps:
  1_validate:
    - check_framework:
        rules:
          - framework_structure
          - required_files
          - permissions
    - load_state:
        rules:
          - memory_exists
          - state_valid
    
  2_prepare:
    - load_context:
        from: memory/project
        required: true
        validation:
          - exists
          - readable
          - valid_format
    - get_last_session:
        from: memory/session
        required: false
        validation:
          - format_valid
          - state_valid
        
  3_load:
    - load_context:
        type: memory
        required:
          - core
          - project
          - session
        optional:
          - decisions
        validation:
          - memory_valid
          - state_valid
    
    - load_decisions:
        directory: project/decisions
        filter:
          status: [accepted, proposed]
        sort:
          by: created
          order: desc
        limit: 5
    
    - load_tasks:
        directory: tasks
        filter:
          status: [active, hold]
        sort:
          by: updated
          order: desc
    
  3_execute:
    - create_session:
        type: development
        template: session
        content:
          - context_summary
          - active_tasks
          - recent_changes
        validation:
          - format_valid
          - required_fields
          
    - set_focus:
        type: task
        source: 
          - option: --task
          - last: active_task
          - state: next_task
        validation:
          task:
            - exists
            - valid_state
          state:
            - valid_transition
            - allows_focus
        
    - update_state:
        type: framework
        status: development
        validation:
          - valid_state
          - valid_transition
        
  4_present:
    - show_context:
        sections:
          - active_task
          - recent_decisions
          - current_focus
          - next_steps
        
  4_verify:
    - validate_session:
        type: session
        rules:
          - format_valid
          - state_valid
        
    - check_focus:
        type: task
        rules:
          - task_exists
          - focus_valid
        
    - verify_state:
        type: framework
        rules:
          - state_valid
          - session_active

errors:
  framework:
    structure: Framework structure invalid
    permissions: Missing required permissions
    state: Invalid framework state
  session:
    creation: Session creation failed
    format: Invalid session format
    focus: Missing task focus
  task:
    missing: Task not found
    state: Invalid task state
    focus: Task focus failed

recovery:
  framework:
    structure: Validate framework structure
    permissions: Check and fix permissions
    state: Restore framework state
  session:
    creation: Retry session creation
    format: Fix session format
    focus: Set default focus
  task:
    missing: Select valid task
    state: Fix task state
    focus: Reset task focus

templates:
  session:
    format: json
    source: .context/templates/sessions/TEMPLATE.md
    required_fields:
      - session_id
      - start_time
      - active_task
    sections:
      - context
      - focus
      - state

validation:
  rules:
    - framework_ready
    - session_valid
    - task_valid
  requirements:
    framework:
      - valid_structure
      - valid_permissions
    session:
      - valid_format
      - complete_fields
    task:
      - valid_state
      - allows_focus

# Command Template with Required Components
command_template:
  name: start
  description: "Template for implementing the start command"
  version: 1.0
  
  required_components:
    pre_execution:
      - session_check:
          description: "Check if there's already an active session"
          validation:
            - session_status_valid: "Session status must be checked"
          implementation: |
            1. Check if active.json exists in memory/session/
            2. Verify if there's an active session
            3. If continuing a session, load the existing session data
            4. If starting a new session, ensure no conflicts with existing sessions
      
      - focus_identification:
          description: "Identify the focus for the new session"
          validation:
            - focus_valid: "Focus must be valid"
          implementation: |
            1. Check for --task option to set specific focus
            2. If no task specified, identify most relevant active task
            3. If no active tasks, suggest creating or starting a task
            4. Validate that the focus task exists and is in a valid state
      
      - context_loading:
          description: "Load relevant context for the session"
          validation:
            - context_loaded: "Context must be loaded"
          implementation: |
            1. Load project context from memory/project/context/project.json
            2. Load active tasks from tasks/active/
            3. Load recent decisions from decisions/
            4. Load self-improvement recommendations
    
    execution:
      - session_creation:
          description: "Create a new session document"
          validation:
            - template_exists: "Session template must exist"
            - session_created: "Session document must be created"
            - format_valid: "Session must have valid format"
          implementation: |
            1. Generate session ID from date
            2. Copy session template to new file
            3. Update session metadata (front matter)
            4. Initialize session sections
      
      - focus_setting:
          description: "Set the session focus"
          validation:
            - focus_valid: "Focus must be valid"
            - task_exists: "Focus task must exist"
            - transition_valid: "Task state transition must be valid"
          implementation: |
            1. Identify focus task
            2. If needed, move task from planned to active
            3. Set focus in session document
            4. Update task state if needed
      
      - code_context_loading:
          description: "Load relevant code context for focused task"
          validation:
            - task_exists: "Task must exist to load code context"
            - context_valid: "Code context section must be valid"
          implementation: |
            1. Read Code Context section from focused task
            2. Prioritize code files by relevance score
            3. Load high relevance (â‰¥0.7) code immediately
            4. Prepare search instructions for medium relevance (0.3-0.6) code
            5. Note low relevance (<0.3) code for reference only when needed
            6. Track loaded code in session for context management
            7. Verify no .context/ directory files are included
            8. Focus exclusively on source code files relevant to implementation
      
      - recommendations_loading:
          description: "Load self-improvement recommendations"
          validation:
            - recommendations_loaded: "Recommendations must be loaded"
          implementation: |
            1. Load recommendations from self_improvement.json
            2. Filter for relevant recommendations
            3. Include recommendations in session document
      
      - session_memory_update:
          description: "Update session memory with new session"
          validation:
            - memory_updated: "Session memory must be updated"
          implementation: |
            1. Update active.json with new session information
            2. Set sessionId, status, started timestamp
            3. Set activeTask and currentStep
            4. Initialize progress tracking
    
    post_execution:
      - session_verification:
          description: "Verify session document has been created"
          validation:
            - file_exists: "Session file must exist"
            - content_valid: "Session content must be valid"
          implementation: |
            1. Verify session document exists
            2. Check that all required sections are present
            3. Validate front matter and content
      
      - memory_verification:
          description: "Verify session memory has been updated"
          validation:
            - memory_updated: "Session memory must be updated"
          implementation: |
            1. Verify active.json has been updated
            2. Check that sessionId matches new session
            3. Verify status is set to "active"
            4. Confirm timestamps are current
      
      - reporting:
          description: "Report session start results"
          validation:
            - report_complete: "Report must include all session details"
          implementation: |
            1. Generate summary of the session start
            2. Include focus and context information
            3. List active tasks and recommendations
    
    error_handling:
      - error_detection:
          description: "Detect and handle errors"
          validation:
            - errors_handled: "All potential errors must be handled"
          implementation: |
            1. Check for common errors (missing files, invalid state)
            2. Implement recovery procedures
            3. Log errors and recovery attempts
      
      - consistency_check:
          description: "Ensure system consistency"
          validation:
            - state_consistent: "System state must be consistent"
          implementation: |
            1. Verify session document and memory are in sync
            2. Check that project context reflects current state
            3. Fix inconsistencies if found
  
  implementation_example: |
    # Example implementation of /aegis start --task TASK-123
    
    ## Pre-execution
    1. Check for active session:
       - Verify if there's an active session in memory/session/active.json
       - If continuing, load existing session data
       - If new session, ensure no conflicts
    2. Identify focus:
       - Task TASK-123 specified via --task option
       - Verify TASK-123 exists and is in a valid state
    3. Load context:
       - Load project context from memory/project/context/project.json
       - Load active tasks from tasks/active/
       - Load recent decisions and recommendations
    
    ## Execution
    1. Create session document:
       - Generate session ID: SESSION-2025-03-12
       - Copy template from .context/templates/sessions/TEMPLATE.md to sessions/2025-03-12-session.md
       - Set metadata (created, updated timestamps)
       - Set status to "active"
    2. Set focus:
       - Set focus to TASK-123
       - If TASK-123 is in planned/, move to active/
       - Document focus in session Progress section
    3. Load code context:
       - Read Code Context section from TASK-123
       - Load high relevance code files immediately
       - Prepare search instructions for medium relevance files
       - Note low relevance files for reference only
       - Track loaded code in session for context management
    4. Load recommendations:
       - Include relevant recommendations from self_improvement.json
    5. Update session memory:
       - Update active.json with new session information
       - Set sessionId, status, started timestamp
       - Set activeTask to TASK-123
    
    ## Post-execution
    1. Verify session document:
       - Confirm sessions/2025-03-12-session.md exists
       - Verify all required sections are present
       - Validate front matter and content
    2. Verify session memory:
       - Confirm active.json has been updated
       - Verify sessionId matches SESSION-2025-03-12
       - Confirm status is "active"
    3. Report results:
       - Generate summary of session start
       - Include focus on TASK-123
       - List active tasks and recommendations
    
    ## Error handling
    1. Check for errors:
       - If TASK-123 doesn't exist, suggest alternatives
       - If session creation fails, retry or report error
    2. Ensure consistency:
       - Verify session document and memory are in sync
       - Check that project context is up to date
