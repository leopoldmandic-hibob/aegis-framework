name: task
description: Manage tasks and track progress
version: 1.0

natural_language_examples:
  - command: "/aegis task create"
    variations:
      - "create a new task"
      - "add a task to the project"
      - "make a new task"
      - "start tracking a new task"
      - "add work item"
  - command: "/aegis task start TASK-123"
    variations:
      - "start working on TASK-123"
      - "begin TASK-123"
      - "move TASK-123 to active"
      - "transition TASK-123 to active"
      - "activate TASK-123"
  - command: "/aegis task complete TASK-123"
    variations:
      - "complete TASK-123"
      - "mark TASK-123 as done"
      - "finish TASK-123"
      - "move TASK-123 to completed"
      - "TASK-123 is finished"
  - command: "/aegis task hold TASK-123"
    variations:
      - "put TASK-123 on hold"
      - "pause work on TASK-123"
      - "temporarily stop TASK-123"
      - "move TASK-123 to hold"
      - "block TASK-123"
  - command: "/aegis task resume TASK-123"
    variations:
      - "resume TASK-123"
      - "continue working on TASK-123"
      - "restart TASK-123"
      - "unblock TASK-123"
      - "move TASK-123 back to active"
  - command: "/aegis task update TASK-123 --priority high"
    variations:
      - "update TASK-123 priority to high"
      - "change TASK-123 priority to high"
      - "set TASK-123 as high priority"
      - "make TASK-123 high priority"
      - "TASK-123 should be high priority"

validation_source:
  file: validation.yaml
  type: command_validation
  rules:
    - task

input:
  type: command
  pattern: /aegis task
  options:
    - name: --start
      description: Start task
      required: false
    - name: --complete
      description: Complete task
      required: false
    - name: --hold
      description: Hold task
      required: false
  validation:
    type: task
    rules:
      - framework_ready
      - valid_task
      - valid_transition

output:
  type: operation
  actions:
    - manage_task
    - update_state
  validation:
    task:
      - format_valid
      - state_valid
    transition:
      - valid_state
      - allowed_move

steps:
  1_validate:
    - check_framework:
        rules:
          - framework_structure
          - required_files
          - permissions
    - verify_task:
        rules:
          - exists
          - valid_format
          - correct_state
  
  2_create_task:
    action: create_task
    use: task_creation.yaml
    validate:
      - template_valid
      - content_complete
      - location_correct
    
  2_transition:
    action: task_transition
    use: task_transition.yaml
    validate:
      - transition_valid
      - no_duplicates
    
  3_verify:
    action: verify_result
    checks:
      - file_location
      - state_updated
      - no_duplicates

errors:
  framework:
    structure: Framework structure invalid
    permissions: Missing required permissions
    state: Invalid framework state
  task:
    missing: Task not found
    format: Invalid task format
    state: Invalid task state
  transition:
    invalid: Invalid state transition
    failed: Transition failed
    location: Wrong task location

recovery:
  framework:
    structure: Validate framework structure
    permissions: Check and fix permissions
    state: Restore framework state
  task:
    missing: Locate or create task
    format: Fix task format
    state: Correct task state
  transition:
    invalid: Check valid transitions
    failed: Retry transition
    location: Move to correct location

error_handling:
  duplicate_prevention:
    - check: "Find any duplicate task files"
    - action: "Remove duplicates, keep correct state version"
    - verify: "Only one copy exists in correct location"
  
  state_mismatch:
    - check: "Verify task state matches location"
    - action: "Move to correct location if needed"
    - verify: "State and location are consistent"

templates:
  task:
    source: .context/templates/tasks/TEMPLATE.md
    required: true
    validation:
      - exists
      - format_valid
      - content_complete

# Task Creation Rules
rules:
  1_template:
    - Always use TEMPLATE.md from templates/tasks/
    - Copy entire template structure
    - Fill all required fields
    - Update front matter
  
  2_location:
    - New tasks in planned/
    - Transitions use mv command
    - Verify target exists
    - No duplicate files
  
  3_content:
    - Use descriptive titles
    - Include objectives
    - List concrete steps
    - Note dependencies
    - Track progress

# Error Prevention
safeguards:
  - template_check: "Verify template exists"

# Command Template with Required Components
command_template:
  name: task
  description: "Template for implementing the task command"
  version: 1.0
  
  required_components:
    pre_execution:
      - task_identification:
          description: "Identify the task operation (create, start, complete, hold)"
          validation:
            - operation_valid: "Operation must be one of: create, start, complete, hold"
            - task_specified: "Task ID must be specified for start, complete, hold operations"
          implementation: |
            1. Parse command options (--start, --complete, --hold)
            2. Determine operation type
            3. Validate operation parameters
            4. Load task context if task ID is provided
      
      - state_validation:
          description: "Validate the current task state"
          validation:
            - task_exists: "Task must exist for start, complete, hold operations"
            - state_valid: "Current task state must be valid for the operation"
            - transition_allowed: "State transition must be allowed"
          implementation: |
            1. Check if task file exists
            2. Verify task format is valid
            3. Check current task state
            4. Validate that the requested transition is allowed
    
    execution:
      - task_operation:
          description: "Perform the requested task operation"
          validation:
            - operation_valid: "Operation must be valid"
            - parameters_valid: "Operation parameters must be valid"
          implementation: |
            1. For create: Copy template and create new task file
            2. For start: Move task from planned to active
            3. For complete: 
               - Check Test Status section value
               - If status is "Passing" or "Not Applicable", proceed normally
               - If status is "Failing" or "Not Started", prompt user for confirmation
               - Only after confirmation or if status is acceptable, move task from active to completed
            4. For hold: Move task from active to hold
      
      - task_update:
          description: "Update the task document"
          validation:
            - file_exists: "Task file must exist"
            - format_valid: "Task format must be valid"
          implementation: |
            1. Update task front matter (status, updated timestamp)
            2. Update task progress section
            3. Update task next steps section
            4. Maintain Code Context section:
               - Add newly discovered relevant files
               - Update relevance scores based on usage
               - Add specific line number ranges when possible
               - Remove or downgrade irrelevant files
               - NEVER include files from .context/ directory
               - Focus exclusively on source code files relevant to implementation
               - For framework tasks, include only specific framework files being modified
      
      - project_update:
          description: "Update project context with task changes"
          validation:
            - file_exists: "Project context file must exist"
            - format_valid: "Project context format must be valid"
          implementation: |
            1. Update activeTasks list
            2. Update completedTasks list
            3. Update plannedTasks list
            4. Update project.json timestamp
    
    post_execution:
      - verification:
          description: "Verify task operation was successful"
          validation:
            - file_location: "Task file must be in the correct location"
            - content_valid: "Task content must be valid"
            - project_updated: "Project context must be updated"
          implementation: |
            1. Verify task file is in the correct directory
            2. Verify task front matter is updated correctly
            3. Verify project.json is updated correctly
      
      - reporting:
          description: "Report task operation results"
          validation:
            - report_complete: "Report must include all operation details"
          implementation: |
            1. Generate summary of the operation
            2. Include task details
            3. Include next steps
    
    error_handling:
      - error_detection:
          description: "Detect and handle errors"
          validation:
            - errors_handled: "All potential errors must be handled"
          implementation: |
            1. Check for common errors (missing files, invalid state)
            2. Implement recovery procedures
            3. Log errors and recovery attempts
      
      - consistency_check:
          description: "Ensure system consistency"
          validation:
            - no_duplicates: "No duplicate task files"
            - state_consistent: "Task state consistent with location"
          implementation: |
            1. Check for duplicate task files
            2. Verify task state matches directory location
            3. Fix inconsistencies if found
  
  implementation_example: |
    # Example implementation of /aegis task start TASK-123
    
    ## Pre-execution
    1. Identify operation: start task TASK-123
    2. Validate current state:
       - Check if TASK-123 exists in planned/
       - Verify task format is valid
       - Confirm transition from planned to active is allowed
    
    ## Execution
    1. Perform task operation:
       - Move TASK-123 from planned/ to active/
    2. Update task document:
       - Change status to "active"
       - Update timestamp to current time
       - Add entry to Progress section
    3. Update project context:
       - Add TASK-123 to activeTasks list
       - Remove TASK-123 from plannedTasks list
       - Update project.json timestamp
    
    ## Post-execution
    1. Verify operation:
       - Confirm TASK-123 is in active/ directory
       - Verify front matter is updated correctly
       - Verify project.json is updated correctly
    2. Report results:
       - Generate summary of the operation
       - Include task details and next steps
    
    ## Error handling
    1. Check for errors:
       - If task file is missing, report error
       - If state transition is invalid, report error
    2. Ensure consistency:
       - Check for duplicate task files
       - Verify task state matches directory location

# AI Assistant State Validation Checklist
ai_validation:
  - after_task_transition:
      update_files:
        - file: memory/project/context/project.json
          fields:
            - updated: "Current timestamp in YYYY-MM-DDTHH:MM:SS format"
            - activeTasks: "Array of task IDs from .context/tasks/active/"
            - completedTasks: "Array of task IDs from .context/tasks/completed/"
      
      verification_steps:
        - "Verify project.json updated timestamp is current"
        - "Verify activeTasks array matches actual active tasks"
        - "Verify completedTasks array matches actual completed tasks"
        - "Verify no duplicate task entries exist in arrays"
